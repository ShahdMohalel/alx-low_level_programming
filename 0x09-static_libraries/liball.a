!<arch>
_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
0-isupper.c/    0           0     0     644     268       `
#include<stdio.h>
#include "main.h"
/**
 * _isupper - checkif character is uppercase
 * @c: The parameter 'c' represents the number to be checked
 * Return: 1 if true / 0 if false
*/
int _isupper(int c)
{
if (c <= 90 && c >= 65)
{
return (1);
}
else
{
return (0);
}
}
1-isdigit.c/    0           0     0     644     266       `
#include<stdio.h>
#include "main.h"
/**
 * _isdigit - check if between '0' and '1'
 * @c: The parameter 'c' represents the number to be checked
 * Return: 1 if true / 0 if false
*/
int _isdigit(int c)
{
if (c >= 48 && c <= 57)
{
return (1);
}
else
{
return (0);
}
}
3-islower.c/    0           0     0     644     290       `
#include<stdio.h>
#include "main.h"
/**
 * _islower -check if character is a lowercase
 * @c: The parameter 'c' (or member 'c') represents ASCII number of a character
 * Return: 1 if true / 0 if false
*/
int _islower(int c)
{
if (c <= 122 && 97 <= c)
{
return (1);
}
else
{
return (0);
}
}
4-isalpha.c/    0           0     0     644     325       `
#include<stdio.h>
#include "main.h"
/**
 * _isalpha - check if character is an alphabetic character
 * @c: The parameter 'c' represents ASCII number of an alphabetic character
 * Return: 1 if true / 0 if false
*/
int _isalpha(int c)
{
if ((c <= 122 && 97 <= c) || (c <= 90 && 65 <= c))
{
return (1);
}
else
{
return (0);
}
}

6-abs.c/        0           0     0     644     202       `
#include<stdio.h>
#include "main.h"
/**
 * _abs - absolute
 * @n: the integer 'n' will be a positive number
 * Return: result
*/
int _abs(int n)
{
if (n > 0)
{
return (n);
}
else
{
return (n / -1);
}
}
2-strlen.c/     0           0     0     644     335       `
#include "main.h"
#include <stddef.h>
/**
 * _strlen - return the length of string
 * @s: The parameter "*s" represents the string
 * Return: "len" return thr length
*/
int _strlen(char *s)
{
int i;
int count = 0;
int length = 0;
for (i = 0; s[i] != '\0'; i++)
{
count++;
}
for (i = 0; i < count; i++)
{
length++;
}
return (length);
}

3-puts.c/       0           0     0     644     282       `
#include "main.h"
/**
 * _puts - print strings
 * @str: The parameter "str" represents the string
 * Return: no return
*/
void _puts(char *str)
{
int i;
int count = 0;
for (i = 0; str[i] != '\0'; i++)
{
count++;
}
for (i = 0; i < count; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}
9-strcpy.c/     0           0     0     644     366       `
#include "main.h"
/**
 * _strcpy - copy strings
 * @dest: The parameter "*dest" represents destination of copy
 * @src: The parameter "*src" represents source of copy
 * Return: returns the pointer "dest".
*/
char *_strcpy(char *dest, char *src)
{
char *dest_start = dest;
while (*src != '\0')
{
*dest = *src;
dest++;
src++;
}

*dest = '\0';

return (dest_start);
}
0-strcat.c/     0           0     0     644     778       `
#include "main.h"
#include <stdlib.h>
/**
 * _strcat - concatinate strings
 * @dest: The parameter "dest" represents the strings
 * @src: The parameter "src" represents the strings
 * Return: returns the "concat" concatenated string.
*/
char *_strcat(char *dest, char *src)
{
int src_count = 0;
int dest_count = 0;
int i;
int concat_size;
char *concat;
if (dest == NULL && src == NULL)
{
return (NULL);
}
for (i = 0; src[i] != '\0'; i++)
{
src_count++;
}
for (i = 0; dest[i] != '\0'; i++)
{
dest_count++;
}
concat_size = src_count + dest_count;
concat = (char *)malloc((concat_size + 1) * sizeof(char));
for (i = 0; i < dest_count; i++)
{
concat[i] = dest[i];
}
for (i = 0; i < src_count; i++)
{
concat[dest_count + i] = src[i];
}
concat[concat_size] = '\0';
return (concat);
}
1-strncat.c/    0           0     0     644     789       `
#include "main.h"
#include <stdlib.h>
/**
 * _strncat - concatinate strings
 * @dest: The parameter "dest" represent string
 * @src: The parameter "src" represent string
 * @n: the parameter 'n' represents the number of bytes
 * Return: return "concat"
*/
char *_strncat(char *dest, char *src, int n)
{
int src_count = 0;
int dest_count = 0;
int i;
int concat_size;
char *concat;
if (dest == NULL && src == NULL)
{
return (NULL);
}
for (i = 0; src[i] != '\0'; i++)
{
src_count++;
}
for (i = 0; dest[i] != '\0'; i++)
{
dest_count++;
}
concat_size = n + dest_count;
concat = (char *)malloc((concat_size + 1) * sizeof(char));
for (i = 0; i < dest_count; i++)
{
concat[i] = dest[i];
}
for (i = 0; i < n; i++)
{
concat[dest_count + i] = src[i];
}
concat[concat_size] = '\0';
return (concat);
}

3-strcmp.c/     0           0     0     644     588       `
#include "main.h"
/**
 * _strcmp - compares two strings.
 * @s1: The parameter "*s1" represents the first string.
 * @s2: The parameter "*s2" represents the second string.
 * Return: returns '0' if equal "0 < " or "0 > ".
*/
int _strcmp(char *s1, char *s2)
{
int i;
int count1 = 0;
int count2 = 0;
int count = 0;
int result;
for (i = 0; s1[i] != '\0'; i++)
{
count1++;
}

for (i = 0; s2[i] != '\0'; i++)
{
count2++;
}

if (count1 > count2)
{
count = count1;
}
else
{
count = count2;
}
for (i = 0; i < count; i++)
{
result = s1[i] - s2[i];
if (result != 0)
{
break;
}
}
return (result);
}
0-memset.c/     0           0     0     644     386       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte.
 * @n: The parameter 'n' represents the number to of bytes.
 * @b: The parameter 'b' represents the character.
 * @s: The parameter "*s" represents the pointer to the mem.
 * Return: returns the 's'.
*/
char *_memset(char *s, char b, unsigned int n)
{
int i;
for (i = 0; i < (int)n; i++)
{
s[i] = b;
}
return (s);
}
1-memcpy.c/     0           0     0     644     358       `
#include "main.h"
/**
 * _memcpy - copies memory area.
 * @n: The parameter 'n' represents the number of bytes.
 * @src: the array "*src" to copy from.
 * @dest: the array "*dest" to copy into.
 * Return: returns the "dest".
*/
char *_memcpy(char *dest, char *src, unsigned int n)
{
int i;
for (i = 0; i < (int)n; i++)
{
dest[i] = src[i];
}
return (dest);
}
2-strchr.c/     0           0     0     644     379       `
#include "main.h"
#include <stddef.h>
/**
 * _strchr - locates a character in a string.
 * @c: The parameter 'c' represents the character.
 * @s: the parameter "*s" represents the string.
 * Return: returns "NULL" if not found / and locat if found.
*/
char *_strchr(char *s, char c)
{
int i;
for (i = 0; s[i] != '\0'; i++)
{
if (s[i] == c)
{
return (&s[i]);
}
}
return (NULL);
}

3-strspn.c/     0           0     0     644     529       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring.
 * @s: The parameter "*s" represents the string.
 * @accept: the parameter "*accept" represents the string.
 * Return: returns '0'/number of bytes in the initial segment of s.
*/
unsigned int _strspn(char *s, char *accept)
{
int i;
int j;
int span = 0;
int match;
for (i = 0; s[i] != '\0'; i++)
{
match = 0;
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
span++;
match = 1;
break;
}
}
if (match != 1)
{
return (span);
}
}
return (span);
}

4-strpbrk.c/    0           0     0     644     446       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - locates a character in a string.
 * @accept: The parameter "*accept" represents the string.
 * @s: the parameter "*s" represents the string.
 * Return: returns "NULL" if not found / and locat if found.
*/
char *_strpbrk(char *s, char *accept)
{
int i, j;
for (i = 0; s[i] != '\0'; i++)
{
for (j = 0; accept[j] != '\0'; j++)
{
if (s[i] == accept[j])
{
return (&s[i]);
}
}
}
return (NULL);
}
5-strstr.c/     0           0     0     644     600       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr -  locates a substring.
 * @haystack: The parameter "*haystack" represents the string.
 * @needle: the parameter "*needle" represents the string.
 * Return: returns "NULL" if not found / and locat if found.
*/
char *_strstr(char *haystack, char *needle)
{
int i, j;
int count = 0;
for (j = 0; needle[j] != '\0'; j++)
{
count++;
}

for (i = 0; haystack[i] != '\0'; i++)
{
int match = 0;
for (j = 0; j < count; j++)
{
if (haystack[i + j] == needle[j])
{
match++;
if (match == count)
{
return (&haystack[i]);
}
}
else
{
break;
}
}
}
return (NULL);
}
100-atoi.c/     0           0     0     644     411       `
#include"main.h"
/**
 * _atoi - check numbers sign
 * @s: The parameter 'n' represents the string.
 * Return: sign and result.
*/
int _atoi(char *s)
{
int result = 0;
int sign = 1;
int i = 0;
while (s[i] == ' ' || s[i] == '\t')
{
i++;
}
if (s[i] == '-')
{
sign = -1;
i++;
}
else if (s[i] == '+')
{
i++;
}
while (s[i] >= '0' && s[i] <= '9')
{
result = result * 10 + (s[i] - '0');
i++;
}
return (sign *result);
}

2-strncpy.c/    0           0     0     644     389       `
/**
 * _strncpy - copy a string
 * @n: The parameter 'n' represents the number of bytes
 * @src: reoresents the source
 * @dest: represents the destination
 * Return: dest_start
*/
char *_strncpy(char *dest, char *src, int n)
{
char *dest_start = dest;
while (*src != '\0' && n > 0)
{
*dest = *src;
dest++;
src++;
n--;
}
while (n > 0)
{
*dest = '\0';
dest++;
n--;
}
return (dest_start);
}

